generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  lastLogin             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accounts              Account[]
  sessions              Session[]
  preferences           UserPreferences?
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  routePreferences      RoutePreferences?
  activityPreferences   ActivityPreferences?
  notificationSettings  NotificationSettings?
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model UserPreferences {
  id                String  @id @default(cuid())
  userId           String  @unique
  theme            String  @default("light")
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  language         String  @default("en")
  timezone         String  @default("UTC")
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoutePreferences {
  id                String  @id @default(cuid())
  userId           String  @unique
  defaultTransportMode String  @default("WALK")
  avoidHighways    Boolean @default(false)
  avoidTolls       Boolean @default(false)
  preferScenic     Boolean @default(false)
  maxWalkingDistance Int     @default(5000) // meters
  maxBikingDistance Int     @default(20000) // meters
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivityPreferences {
  id                String  @id @default(cuid())
  userId           String  @unique
  preferredActivities String[] @default(["WALK", "BIKE"])
  weeklyGoals      Json?   // Stored as JSON with activity types and target durations
  difficultyLevel  String  @default("MODERATE")
  shareActivity    Boolean @default(false)
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id                String  @id @default(cuid())
  userId           String  @unique
  routeUpdates     Boolean @default(true)
  weatherAlerts    Boolean @default(true)
  achievementAlerts Boolean @default(true)
  socialUpdates    Boolean @default(true)
  dailyReminders   Boolean @default(true)
  emailDigest      Boolean @default(true)
  digestFrequency  String  @default("WEEKLY") // DAILY, WEEKLY, MONTHLY
  quietHoursStart  Int     @default(22) // 24-hour format
  quietHoursEnd    Int     @default(7)  // 24-hour format
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
