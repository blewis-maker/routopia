"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/components/Map.tsx":
/*!********************************!*\
  !*** ./src/components/Map.tsx ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Map; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var mapbox_gl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mapbox-gl */ \"(app-pages-browser)/./node_modules/mapbox-gl/dist/mapbox-gl.js\");\n/* harmony import */ var mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mapbox_gl__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var mapbox_gl_dist_mapbox_gl_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mapbox-gl/dist/mapbox-gl.css */ \"(app-pages-browser)/./node_modules/mapbox-gl/dist/mapbox-gl.css\");\n/* harmony import */ var _SearchPanel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SearchPanel */ \"(app-pages-browser)/./src/components/SearchPanel.tsx\");\n/* harmony import */ var _lib_pointsOfInterest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/pointsOfInterest */ \"(app-pages-browser)/./src/lib/pointsOfInterest.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n(mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().accessToken) = \"pk.eyJ1Ijoicm91dG9waWEtYWkiLCJhIjoiY200MWkzb25xMHFtcjJxcHRmOTE3NTlrNSJ9.d2Ds8SJXnQzc2W1o50D76Q\";\nfunction Map() {\n    _s();\n    const mapContainer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const mapInstance = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const locationMarker = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const routeSource = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [showSearch, setShowSearch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [userLocation, setUserLocation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Create route between two points\n    const createRoute = async (start, end)=>{\n        try {\n            var _mapInstance_current, _mapInstance_current1;\n            // Get route from Mapbox Directions API\n            const query = await fetch(\"https://api.mapbox.com/directions/v5/mapbox/walking/\".concat(start[0], \",\").concat(start[1], \";\").concat(end[0], \",\").concat(end[1], \"?steps=true&geometries=geojson&access_token=\").concat((mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().accessToken)));\n            const json = await query.json();\n            const data = json.routes[0];\n            const route = data.geometry.coordinates;\n            // Add the route to the map\n            if (!((_mapInstance_current = mapInstance.current) === null || _mapInstance_current === void 0 ? void 0 : _mapInstance_current.getSource(\"route\"))) {\n                var // Add two sources: one for the full route, one for the animated portion\n                _mapInstance_current2, _mapInstance_current3, // Bright background line\n                _mapInstance_current4, // Animated bright line with glow effect\n                _mapInstance_current5;\n                (_mapInstance_current2 = mapInstance.current) === null || _mapInstance_current2 === void 0 ? void 0 : _mapInstance_current2.addSource(\"route-full\", {\n                    type: \"geojson\",\n                    data: {\n                        type: \"Feature\",\n                        properties: {},\n                        geometry: {\n                            type: \"LineString\",\n                            coordinates: route\n                        }\n                    }\n                });\n                (_mapInstance_current3 = mapInstance.current) === null || _mapInstance_current3 === void 0 ? void 0 : _mapInstance_current3.addSource(\"route-animated\", {\n                    type: \"geojson\",\n                    data: {\n                        type: \"Feature\",\n                        properties: {},\n                        geometry: {\n                            type: \"LineString\",\n                            coordinates: [\n                                route[0]\n                            ]\n                        }\n                    }\n                });\n                (_mapInstance_current4 = mapInstance.current) === null || _mapInstance_current4 === void 0 ? void 0 : _mapInstance_current4.addLayer({\n                    id: \"route-full\",\n                    type: \"line\",\n                    source: \"route-full\",\n                    layout: {\n                        \"line-join\": \"round\",\n                        \"line-cap\": \"round\"\n                    },\n                    paint: {\n                        \"line-color\": \"#34d399\",\n                        \"line-width\": 4,\n                        \"line-opacity\": 0.2\n                    }\n                });\n                (_mapInstance_current5 = mapInstance.current) === null || _mapInstance_current5 === void 0 ? void 0 : _mapInstance_current5.addLayer({\n                    id: \"route-animated\",\n                    type: \"line\",\n                    source: \"route-animated\",\n                    layout: {\n                        \"line-join\": \"round\",\n                        \"line-cap\": \"round\"\n                    },\n                    paint: {\n                        \"line-color\": \"#34d399\",\n                        \"line-width\": 4,\n                        \"line-opacity\": 1,\n                        \"line-blur\": 2,\n                        \"line-gradient\": [\n                            \"interpolate\",\n                            [\n                                \"linear\"\n                            ],\n                            [\n                                \"line-progress\"\n                            ],\n                            0,\n                            \"rgba(52, 211, 153, 0)\",\n                            0.1,\n                            \"rgba(52, 211, 153, 1)\",\n                            0.9,\n                            \"rgba(52, 211, 153, 1)\",\n                            1,\n                            \"rgba(52, 211, 153, 0)\"\n                        ]\n                    }\n                });\n                // Find POI cluster points along route\n                const pois = await (0,_lib_pointsOfInterest__WEBPACK_IMPORTED_MODULE_5__.findPOIsAlongRoute)(route);\n                const poiClusters = groupNearbyPois(pois);\n                const clusterPoints = poiClusters.map((cluster)=>{\n                    // Get center point of cluster\n                    const center = cluster[0].coordinates;\n                    return {\n                        point: center,\n                        pois: cluster\n                    };\n                });\n                // Animate route and reveal POIs\n                let start;\n                const duration = 2000;\n                const delay = 2000;\n                let currentClusterIndex = 0;\n                setTimeout(()=>{\n                    function animate(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = (timestamp - start) / duration;\n                        if (progress <= 1) {\n                            var _mapInstance_current, // Update camera to follow current point\n                            _mapInstance_current1;\n                            // Find current position along route\n                            const currentRouteLength = Math.max(2, Math.floor(progress * route.length));\n                            const currentPoint = route[currentRouteLength - 1];\n                            // Update animated line\n                            const currentRoute = {\n                                type: \"Feature\",\n                                properties: {},\n                                geometry: {\n                                    type: \"LineString\",\n                                    coordinates: route.slice(0, currentRouteLength)\n                                }\n                            };\n                            (_mapInstance_current = mapInstance.current) === null || _mapInstance_current === void 0 ? void 0 : _mapInstance_current.getSource(\"route-animated\").setData(currentRoute);\n                            // Check if we've reached a POI cluster\n                            while(currentClusterIndex < clusterPoints.length){\n                                const cluster = clusterPoints[currentClusterIndex];\n                                const distanceToCluster = calculateDistance(currentPoint, cluster.point);\n                                if (distanceToCluster < 0.01) {\n                                    // Reveal POIs in this cluster\n                                    revealPOICluster(cluster.pois, cluster.point);\n                                    currentClusterIndex++;\n                                } else {\n                                    break;\n                                }\n                            }\n                            (_mapInstance_current1 = mapInstance.current) === null || _mapInstance_current1 === void 0 ? void 0 : _mapInstance_current1.easeTo({\n                                center: currentPoint,\n                                zoom: 13,\n                                duration: 0\n                            });\n                            requestAnimationFrame(animate);\n                        }\n                    }\n                    requestAnimationFrame(animate);\n                }, delay);\n            } else {\n                var _mapInstance_current6;\n                // Update existing route\n                const routeSource = (_mapInstance_current6 = mapInstance.current) === null || _mapInstance_current6 === void 0 ? void 0 : _mapInstance_current6.getSource(\"route\");\n                routeSource.setData({\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: {\n                        type: \"LineString\",\n                        coordinates: route\n                    }\n                });\n            }\n            // Find and add POIs along route\n            const pois = await (0,_lib_pointsOfInterest__WEBPACK_IMPORTED_MODULE_5__.findPOIsAlongRoute)(route);\n            addPOIsToMap(pois);\n            // Fit map to show entire route\n            const coordinates = route;\n            const bounds = coordinates.reduce((bounds, coord)=>{\n                return bounds.extend(coord);\n            }, new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().LngLatBounds)(coordinates[0], coordinates[0]));\n            (_mapInstance_current1 = mapInstance.current) === null || _mapInstance_current1 === void 0 ? void 0 : _mapInstance_current1.fitBounds(bounds, {\n                padding: 50\n            });\n        } catch (error) {\n            console.error(\"Error creating route:\", error);\n        }\n    };\n    // Handle location selection from search\n    const handleLocationSelect = (coordinates)=>{\n        if (!userLocation) return;\n        createRoute(userLocation, coordinates);\n        setShowSearch(false);\n    };\n    // Add POI markers to map\n    const addPOIsToMap = (pois)=>{\n        // Group POIs by proximity\n        const groupedPois = groupNearbyPois(pois);\n        groupedPois.forEach((group, groupIndex)=>{\n            group.forEach((poi, poiIndex)=>{\n                const el = document.createElement(\"div\");\n                el.className = \"poi-marker poi-\".concat(poi.type);\n                // Add data attributes for grouping\n                el.dataset.groupId = groupIndex.toString();\n                el.dataset.poiIndex = poiIndex.toString();\n                const popup = new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().Popup)({\n                    offset: 25,\n                    closeButton: true,\n                    closeOnClick: false\n                }).setHTML('\\n          <div style=\"background: #1c1917; color: #ffffff; padding: 12px;\">\\n            <h3 style=\"color: #10b981; margin: 0 0 4px 0; font-size: 14px;\">'.concat(poi.name, '</h3>\\n            <p style=\"color: #a8a29e; margin: 0; font-size: 12px;\">').concat(poi.description || \"\", \"</p>\\n          </div>\\n        \"));\n                const marker = new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().Marker)({\n                    element: el,\n                    anchor: \"bottom\"\n                }).setLngLat(poi.coordinates).setPopup(popup).addTo(mapInstance.current);\n                // Add hover handlers\n                el.addEventListener(\"mouseenter\", ()=>{\n                    const group = document.querySelectorAll('[data-group-id=\"'.concat(groupIndex, '\"]'));\n                    spreadMarkers(Array.from(group), groupIndex);\n                });\n                el.addEventListener(\"mouseleave\", ()=>{\n                    const group = document.querySelectorAll('[data-group-id=\"'.concat(groupIndex, '\"]'));\n                    resetMarkers(Array.from(group));\n                });\n                // Animate marker appearance\n                setTimeout(()=>{\n                    el.style.opacity = \"1\";\n                    el.style.transform = \"translateY(0)\";\n                }, poiIndex * 150);\n            });\n        });\n    };\n    // Helper function to group nearby POIs\n    const groupNearbyPois = (pois)=>{\n        const groups = [];\n        const proximityThreshold = 0.0005; // Adjust this value based on your needs\n        pois.forEach((poi)=>{\n            let foundGroup = false;\n            for (const group of groups){\n                if (group.some((existingPoi)=>Math.abs(existingPoi.coordinates[0] - poi.coordinates[0]) < proximityThreshold && Math.abs(existingPoi.coordinates[1] - poi.coordinates[1]) < proximityThreshold)) {\n                    group.push(poi);\n                    foundGroup = true;\n                    break;\n                }\n            }\n            if (!foundGroup) {\n                groups.push([\n                    poi\n                ]);\n            }\n        });\n        return groups;\n    };\n    // Helper functions for marker spreading\n    const spreadMarkers = (markers, groupIndex)=>{\n        const radius = 30; // Spread radius in pixels\n        markers.forEach((marker, index)=>{\n            const angle = index * (360 / markers.length) * (Math.PI / 180);\n            const x = Math.cos(angle) * radius;\n            const y = Math.sin(angle) * radius;\n            marker.style.transform = \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n            marker.style.zIndex = \"1000\";\n        });\n    };\n    const resetMarkers = (markers)=>{\n        markers.forEach((marker)=>{\n            marker.style.transform = \"translate(0, 0)\";\n            marker.style.zIndex = \"auto\";\n        });\n    };\n    // Helper function to reveal POI cluster\n    const revealPOICluster = (clusterPois, centerPoint)=>{\n        clusterPois.forEach((poi, index)=>{\n            const el = document.createElement(\"div\");\n            el.className = \"poi-marker poi-\".concat(poi.type);\n            const marker = new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().Marker)({\n                element: el,\n                anchor: \"center\"\n            }).setLngLat(centerPoint) // Start at cluster center\n            .addTo(mapInstance.current);\n            // Animate marker appearance and spread\n            setTimeout(()=>{\n                el.style.opacity = \"1\";\n                const angle = index * (360 / clusterPois.length) * (Math.PI / 180);\n                const distance = 0.0005; // Adjust spread distance\n                const newLng = centerPoint[0] + Math.cos(angle) * distance;\n                const newLat = centerPoint[1] + Math.sin(angle) * distance;\n                marker.setLngLat([\n                    newLng,\n                    newLat\n                ]);\n            }, index * 100);\n            // Add popup behavior\n            const popup = new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().Popup)({\n                closeButton: true,\n                closeOnClick: true,\n                maxWidth: \"300px\",\n                className: \"custom-popup\",\n                anchor: \"bottom\"\n            }).setHTML('\\n        <div class=\"popup-content\">\\n          <h3>'.concat(poi.name, \"</h3>\\n          <p>\").concat(poi.description || \"\", \"</p>\\n        </div>\\n      \"));\n            el.addEventListener(\"click\", ()=>{\n                // Close all other popups\n                document.querySelectorAll(\".mapboxgl-popup\").forEach((p)=>p.remove());\n                marker.setPopup(popup).togglePopup();\n            });\n        });\n    };\n    // Helper function to calculate distance between points\n    const calculateDistance = (point1, point2)=>{\n        const dx = point2[0] - point1[0];\n        const dy = point2[1] - point1[1];\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!mapContainer.current) return;\n        // Initialize map\n        mapInstance.current = new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().Map)({\n            container: mapContainer.current,\n            style: \"mapbox://styles/mapbox/dark-v11\",\n            center: [\n                -105.2705,\n                40.0150\n            ],\n            zoom: 14\n        });\n        // Get user location\n        if (\"geolocation\" in navigator) {\n            navigator.geolocation.getCurrentPosition((position)=>{\n                var // Center map on location\n                _mapInstance_current;\n                const location = [\n                    position.coords.longitude,\n                    position.coords.latitude\n                ];\n                setUserLocation(location);\n                // Create custom HTML element for marker\n                const el = document.createElement(\"div\");\n                el.className = \"custom-marker\";\n                const dot = document.createElement(\"div\");\n                dot.className = \"marker-dot\";\n                el.appendChild(dot);\n                const pulse = document.createElement(\"div\");\n                pulse.className = \"marker-pulse\";\n                el.appendChild(pulse);\n                // Create new marker with custom element\n                locationMarker.current = new (mapbox_gl__WEBPACK_IMPORTED_MODULE_2___default().Marker)({\n                    element: el,\n                    anchor: \"center\"\n                }).setLngLat(location).addTo(mapInstance.current);\n                (_mapInstance_current = mapInstance.current) === null || _mapInstance_current === void 0 ? void 0 : _mapInstance_current.flyTo({\n                    center: location,\n                    zoom: 15,\n                    essential: true\n                });\n            }, (error)=>console.error(\"Error getting location:\", error), {\n                enableHighAccuracy: true,\n                timeout: 5000,\n                maximumAge: 0\n            });\n        }\n        return ()=>{\n            if (locationMarker.current) {\n                locationMarker.current.remove();\n            }\n            if (mapInstance.current) {\n                mapInstance.current.remove();\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"relative w-full h-full\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapContainer,\n                className: \"absolute inset-0\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\blewi\\\\Routopia\\\\src\\\\components\\\\Map.tsx\",\n                lineNumber: 425,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: ()=>setShowSearch(true),\n                className: \"absolute top-4 left-4 px-4 py-2 bg-stone-800 hover:bg-stone-700 text-white rounded-md shadow-lg\",\n                children: \"Set Destination\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\blewi\\\\Routopia\\\\src\\\\components\\\\Map.tsx\",\n                lineNumber: 428,\n                columnNumber: 7\n            }, this),\n            showSearch && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_SearchPanel__WEBPACK_IMPORTED_MODULE_4__.SearchPanel, {\n                onClose: ()=>setShowSearch(false),\n                onLocationSelect: handleLocationSelect\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\blewi\\\\Routopia\\\\src\\\\components\\\\Map.tsx\",\n                lineNumber: 437,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\blewi\\\\Routopia\\\\src\\\\components\\\\Map.tsx\",\n        lineNumber: 424,\n        columnNumber: 5\n    }, this);\n}\n_s(Map, \"a9zEwjw+TkuRbQ38evpao2rqgmE=\");\n_c = Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL01hcC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFFb0Q7QUFDbkI7QUFDSztBQUNNO0FBQ2dCO0FBRTVERyw4REFBb0IsR0FBR0ksZ0dBQW9DO0FBRTVDLFNBQVNHOztJQUN0QixNQUFNQyxlQUFlViw2Q0FBTUEsQ0FBaUI7SUFDNUMsTUFBTVcsY0FBY1gsNkNBQU1BLENBQXNCO0lBQ2hELE1BQU1ZLGlCQUFpQlosNkNBQU1BLENBQXlCO0lBQ3RELE1BQU1hLGNBQWNiLDZDQUFNQSxDQUFnQztJQUMxRCxNQUFNLENBQUNjLFlBQVlDLGNBQWMsR0FBR2QsK0NBQVFBLENBQUM7SUFDN0MsTUFBTSxDQUFDZSxjQUFjQyxnQkFBZ0IsR0FBR2hCLCtDQUFRQSxDQUEwQjtJQUUxRSxrQ0FBa0M7SUFDbEMsTUFBTWlCLGNBQWMsT0FBT0MsT0FBeUJDO1FBQ2xELElBQUk7Z0JBVUdULHNCQThKTEE7WUF2S0EsdUNBQXVDO1lBQ3ZDLE1BQU1VLFFBQVEsTUFBTUMsTUFDbEIsdURBQW1FSCxPQUFaQSxLQUFLLENBQUMsRUFBRSxFQUFDLEtBQWVDLE9BQVpELEtBQUssQ0FBQyxFQUFFLEVBQUMsS0FBYUMsT0FBVkEsR0FBRyxDQUFDLEVBQUUsRUFBQyxLQUF3RGxCLE9BQXJEa0IsR0FBRyxDQUFDLEVBQUUsRUFBQyxnREFBbUUsT0FBckJsQiw4REFBb0I7WUFFcEssTUFBTXFCLE9BQU8sTUFBTUYsTUFBTUUsSUFBSTtZQUM3QixNQUFNQyxPQUFPRCxLQUFLRSxNQUFNLENBQUMsRUFBRTtZQUMzQixNQUFNQyxRQUFRRixLQUFLRyxRQUFRLENBQUNDLFdBQVc7WUFFdkMsMkJBQTJCO1lBQzNCLElBQUksR0FBQ2pCLHVCQUFBQSxZQUFZa0IsT0FBTyxjQUFuQmxCLDJDQUFBQSxxQkFBcUJtQixTQUFTLENBQUMsV0FBVTtvQkFDNUMsd0VBQXdFO2dCQUN4RW5CLHVCQVlBQSx1QkFZQSx5QkFBeUI7Z0JB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Z0JBQ0VxRixvQkFBb0I7Z0JBQ3BCQyxTQUFTO2dCQUNUQyxZQUFZO1lBQ2Q7UUFFSjtRQUVBLE9BQU87WUFDTCxJQUFJeEosZUFBZWlCLE9BQU8sRUFBRTtnQkFDMUJqQixlQUFlaUIsT0FBTyxDQUFDZ0gsTUFBTTtZQUMvQjtZQUNBLElBQUlsSSxZQUFZa0IsT0FBTyxFQUFFO2dCQUN2QmxCLFlBQVlrQixPQUFPLENBQUNnSCxNQUFNO1lBQzVCO1FBQ0Y7SUFDRixHQUFHLEVBQUU7SUFFTCxxQkFDRSw4REFBQ3dCO1FBQUk1RSxXQUFVOzswQkFDYiw4REFBQzRFO2dCQUFJQyxLQUFLNUo7Z0JBQWMrRSxXQUFVOzs7Ozs7MEJBR2xDLDhEQUFDOEU7Z0JBQ0NDLFNBQVMsSUFBTXpKLGNBQWM7Z0JBQzdCMEUsV0FBVTswQkFDWDs7Ozs7O1lBS0EzRSw0QkFDQyw4REFBQ1gscURBQVdBO2dCQUNWc0ssU0FBUyxJQUFNMUosY0FBYztnQkFDN0IySixrQkFBa0IzRjs7Ozs7Ozs7Ozs7O0FBSzVCO0dBamJ3QnRFO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9jb21wb25lbnRzL01hcC50c3g/YjE2NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCc7XHJcblxyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBtYXBib3hnbCBmcm9tICdtYXBib3gtZ2wnO1xyXG5pbXBvcnQgJ21hcGJveC1nbC9kaXN0L21hcGJveC1nbC5jc3MnO1xyXG5pbXBvcnQgeyBTZWFyY2hQYW5lbCB9IGZyb20gJy4vU2VhcmNoUGFuZWwnO1xyXG5pbXBvcnQgeyBmaW5kUE9Jc0Fsb25nUm91dGUgfSBmcm9tICdAL2xpYi9wb2ludHNPZkludGVyZXN0JztcclxuXHJcbm1hcGJveGdsLmFjY2Vzc1Rva2VuID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfTUFQQk9YX1RPS0VOIGFzIHN0cmluZztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hcCgpIHtcclxuICBjb25zdCBtYXBDb250YWluZXIgPSB1c2VSZWY8SFRNTERpdkVsZW1lbnQ+KG51bGwpO1xyXG4gIGNvbnN0IG1hcEluc3RhbmNlID0gdXNlUmVmPG1hcGJveGdsLk1hcCB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IGxvY2F0aW9uTWFya2VyID0gdXNlUmVmPG1hcGJveGdsLk1hcmtlciB8IG51bGw+KG51bGwpO1xyXG4gIGNvbnN0IHJvdXRlU291cmNlID0gdXNlUmVmPG1hcGJveGdsLkdlb0pTT05Tb3VyY2UgfCBudWxsPihudWxsKTtcclxuICBjb25zdCBbc2hvd1NlYXJjaCwgc2V0U2hvd1NlYXJjaF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgY29uc3QgW3VzZXJMb2NhdGlvbiwgc2V0VXNlckxvY2F0aW9uXSA9IHVzZVN0YXRlPFtudW1iZXIsIG51bWJlcl0gfCBudWxsPihudWxsKTtcclxuXHJcbiAgLy8gQ3JlYXRlIHJvdXRlIGJldHdlZW4gdHdvIHBvaW50c1xyXG4gIGNvbnN0IGNyZWF0ZVJvdXRlID0gYXN5bmMgKHN0YXJ0OiBbbnVtYmVyLCBudW1iZXJdLCBlbmQ6IFtudW1iZXIsIG51bWJlcl0pID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIEdldCByb3V0ZSBmcm9tIE1hcGJveCBEaXJlY3Rpb25zIEFQSVxyXG4gICAgICBjb25zdCBxdWVyeSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICAgIGBodHRwczovL2FwaS5tYXBib3guY29tL2RpcmVjdGlvbnMvdjUvbWFwYm94L3dhbGtpbmcvJHtzdGFydFswXX0sJHtzdGFydFsxXX07JHtlbmRbMF19LCR7ZW5kWzFdfT9zdGVwcz10cnVlJmdlb21ldHJpZXM9Z2VvanNvbiZhY2Nlc3NfdG9rZW49JHttYXBib3hnbC5hY2Nlc3NUb2tlbn1gXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCBxdWVyeS5qc29uKCk7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBqc29uLnJvdXRlc1swXTtcclxuICAgICAgY29uc3Qgcm91dGUgPSBkYXRhLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xyXG5cclxuICAgICAgLy8gQWRkIHRoZSByb3V0ZSB0byB0aGUgbWFwXHJcbiAgICAgIGlmICghbWFwSW5zdGFuY2UuY3VycmVudD8uZ2V0U291cmNlKCdyb3V0ZScpKSB7XHJcbiAgICAgICAgLy8gQWRkIHR3byBzb3VyY2VzOiBvbmUgZm9yIHRoZSBmdWxsIHJvdXRlLCBvbmUgZm9yIHRoZSBhbmltYXRlZCBwb3J0aW9uXHJcbiAgICAgICAgbWFwSW5zdGFuY2UuY3VycmVudD8uYWRkU291cmNlKCdyb3V0ZS1mdWxsJywge1xyXG4gICAgICAgICAgdHlwZTogJ2dlb2pzb24nLFxyXG4gICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgICAgICAgICBnZW9tZXRyeToge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcclxuICAgICAgICAgICAgICBjb29yZGluYXRlczogcm91dGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtYXBJbnN0YW5jZS5jdXJyZW50Py5hZGRTb3VyY2UoJ3JvdXRlLWFuaW1hdGVkJywge1xyXG4gICAgICAgICAgdHlwZTogJ2dlb2pzb24nLFxyXG4gICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgICAgICAgICBnZW9tZXRyeToge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcclxuICAgICAgICAgICAgICBjb29yZGluYXRlczogW3JvdXRlWzBdXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEJyaWdodCBiYWNrZ3JvdW5kIGxpbmVcclxuICAgICAgICBtYXBJbnN0YW5jZS5jdXJyZW50Py5hZGRMYXllcih7XHJcbiAgICAgICAgICBpZDogJ3JvdXRlLWZ1bGwnLFxyXG4gICAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgICAgc291cmNlOiAncm91dGUtZnVsbCcsXHJcbiAgICAgICAgICBsYXlvdXQ6IHtcclxuICAgICAgICAgICAgJ2xpbmUtam9pbic6ICdyb3VuZCcsXHJcbiAgICAgICAgICAgICdsaW5lLWNhcCc6ICdyb3VuZCdcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwYWludDoge1xyXG4gICAgICAgICAgICAnbGluZS1jb2xvcic6ICcjMzRkMzk5JywgLy8gQnJpZ2h0ZXIgZ3JlZW5cclxuICAgICAgICAgICAgJ2xpbmUtd2lkdGgnOiA0LFxyXG4gICAgICAgICAgICAnbGluZS1vcGFjaXR5JzogMC4yXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEFuaW1hdGVkIGJyaWdodCBsaW5lIHdpdGggZ2xvdyBlZmZlY3RcclxuICAgICAgICBtYXBJbnN0YW5jZS5jdXJyZW50Py5hZGRMYXllcih7XHJcbiAgICAgICAgICBpZDogJ3JvdXRlLWFuaW1hdGVkJyxcclxuICAgICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICAgIHNvdXJjZTogJ3JvdXRlLWFuaW1hdGVkJyxcclxuICAgICAgICAgIGxheW91dDoge1xyXG4gICAgICAgICAgICAnbGluZS1qb2luJzogJ3JvdW5kJyxcclxuICAgICAgICAgICAgJ2xpbmUtY2FwJzogJ3JvdW5kJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHBhaW50OiB7XHJcbiAgICAgICAgICAgICdsaW5lLWNvbG9yJzogJyMzNGQzOTknLFxyXG4gICAgICAgICAgICAnbGluZS13aWR0aCc6IDQsXHJcbiAgICAgICAgICAgICdsaW5lLW9wYWNpdHknOiAxLFxyXG4gICAgICAgICAgICAnbGluZS1ibHVyJzogMixcclxuICAgICAgICAgICAgJ2xpbmUtZ3JhZGllbnQnOiBbXHJcbiAgICAgICAgICAgICAgJ2ludGVycG9sYXRlJyxcclxuICAgICAgICAgICAgICBbJ2xpbmVhciddLFxyXG4gICAgICAgICAgICAgIFsnbGluZS1wcm9ncmVzcyddLFxyXG4gICAgICAgICAgICAgIDAsICdyZ2JhKDUyLCAyMTEsIDE1MywgMCknLFxyXG4gICAgICAgICAgICAgIDAuMSwgJ3JnYmEoNTIsIDIxMSwgMTUzLCAxKScsXHJcbiAgICAgICAgICAgICAgMC45LCAncmdiYSg1MiwgMjExLCAxNTMsIDEpJyxcclxuICAgICAgICAgICAgICAxLCAncmdiYSg1MiwgMjExLCAxNTMsIDApJ1xyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEZpbmQgUE9JIGNsdXN0ZXIgcG9pbnRzIGFsb25nIHJvdXRlXHJcbiAgICAgICAgY29uc3QgcG9pcyA9IGF3YWl0IGZpbmRQT0lzQWxvbmdSb3V0ZShyb3V0ZSk7XHJcbiAgICAgICAgY29uc3QgcG9pQ2x1c3RlcnMgPSBncm91cE5lYXJieVBvaXMocG9pcyk7XHJcbiAgICAgICAgY29uc3QgY2x1c3RlclBvaW50cyA9IHBvaUNsdXN0ZXJzLm1hcChjbHVzdGVyID0+IHtcclxuICAgICAgICAgIC8vIEdldCBjZW50ZXIgcG9pbnQgb2YgY2x1c3RlclxyXG4gICAgICAgICAgY29uc3QgY2VudGVyID0gY2x1c3RlclswXS5jb29yZGluYXRlcztcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHBvaW50OiBjZW50ZXIsXHJcbiAgICAgICAgICAgIHBvaXM6IGNsdXN0ZXJcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEFuaW1hdGUgcm91dGUgYW5kIHJldmVhbCBQT0lzXHJcbiAgICAgICAgbGV0IHN0YXJ0O1xyXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gMjAwMDtcclxuICAgICAgICBjb25zdCBkZWxheSA9IDIwMDA7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRDbHVzdGVySW5kZXggPSAwO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGZ1bmN0aW9uIGFuaW1hdGUodGltZXN0YW1wKSB7XHJcbiAgICAgICAgICAgIGlmICghc3RhcnQpIHN0YXJ0ID0gdGltZXN0YW1wO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzcyA9ICh0aW1lc3RhbXAgLSBzdGFydCkgLyBkdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzcyA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgLy8gRmluZCBjdXJyZW50IHBvc2l0aW9uIGFsb25nIHJvdXRlXHJcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdXRlTGVuZ3RoID0gTWF0aC5tYXgoMiwgTWF0aC5mbG9vcihwcm9ncmVzcyAqIHJvdXRlLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQb2ludCA9IHJvdXRlW2N1cnJlbnRSb3V0ZUxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSBhbmltYXRlZCBsaW5lXHJcbiAgICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdXRlID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmUnLFxyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczoge30sXHJcbiAgICAgICAgICAgICAgICBnZW9tZXRyeToge1xyXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnTGluZVN0cmluZycsXHJcbiAgICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzOiByb3V0ZS5zbGljZSgwLCBjdXJyZW50Um91dGVMZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICBtYXBJbnN0YW5jZS5jdXJyZW50Py5nZXRTb3VyY2UoJ3JvdXRlLWFuaW1hdGVkJykuc2V0RGF0YShjdXJyZW50Um91dGUgYXMgYW55KTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UndmUgcmVhY2hlZCBhIFBPSSBjbHVzdGVyXHJcbiAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRDbHVzdGVySW5kZXggPCBjbHVzdGVyUG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2x1c3RlciA9IGNsdXN0ZXJQb2ludHNbY3VycmVudENsdXN0ZXJJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZVRvQ2x1c3RlciA9IGNhbGN1bGF0ZURpc3RhbmNlKGN1cnJlbnRQb2ludCwgY2x1c3Rlci5wb2ludCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZVRvQ2x1c3RlciA8IDAuMDEpIHsgLy8gQWRqdXN0IHRocmVzaG9sZCBhcyBuZWVkZWRcclxuICAgICAgICAgICAgICAgICAgLy8gUmV2ZWFsIFBPSXMgaW4gdGhpcyBjbHVzdGVyXHJcbiAgICAgICAgICAgICAgICAgIHJldmVhbFBPSUNsdXN0ZXIoY2x1c3Rlci5wb2lzLCBjbHVzdGVyLnBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgY3VycmVudENsdXN0ZXJJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAvLyBVcGRhdGUgY2FtZXJhIHRvIGZvbGxvdyBjdXJyZW50IHBvaW50XHJcbiAgICAgICAgICAgICAgbWFwSW5zdGFuY2UuY3VycmVudD8uZWFzZVRvKHtcclxuICAgICAgICAgICAgICAgIGNlbnRlcjogY3VycmVudFBvaW50IGFzIFtudW1iZXIsIG51bWJlcl0sXHJcbiAgICAgICAgICAgICAgICB6b29tOiAxMyxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAwXHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgICAgICB9LCBkZWxheSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIHJvdXRlXHJcbiAgICAgICAgY29uc3Qgcm91dGVTb3VyY2UgPSBtYXBJbnN0YW5jZS5jdXJyZW50Py5nZXRTb3VyY2UoJ3JvdXRlJykgYXMgbWFwYm94Z2wuR2VvSlNPTlNvdXJjZTtcclxuICAgICAgICByb3V0ZVNvdXJjZS5zZXREYXRhKHtcclxuICAgICAgICAgIHR5cGU6ICdGZWF0dXJlJyxcclxuICAgICAgICAgIHByb3BlcnRpZXM6IHt9LFxyXG4gICAgICAgICAgZ2VvbWV0cnk6IHtcclxuICAgICAgICAgICAgdHlwZTogJ0xpbmVTdHJpbmcnLFxyXG4gICAgICAgICAgICBjb29yZGluYXRlczogcm91dGVcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRmluZCBhbmQgYWRkIFBPSXMgYWxvbmcgcm91dGVcclxuICAgICAgY29uc3QgcG9pcyA9IGF3YWl0IGZpbmRQT0lzQWxvbmdSb3V0ZShyb3V0ZSk7XHJcbiAgICAgIGFkZFBPSXNUb01hcChwb2lzKTtcclxuXHJcbiAgICAgIC8vIEZpdCBtYXAgdG8gc2hvdyBlbnRpcmUgcm91dGVcclxuICAgICAgY29uc3QgY29vcmRpbmF0ZXMgPSByb3V0ZTtcclxuICAgICAgY29uc3QgYm91bmRzID0gY29vcmRpbmF0ZXMucmVkdWNlKChib3VuZHMsIGNvb3JkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGJvdW5kcy5leHRlbmQoY29vcmQgYXMgbWFwYm94Z2wuTG5nTGF0TGlrZSk7XHJcbiAgICAgIH0sIG5ldyBtYXBib3hnbC5MbmdMYXRCb3VuZHMoY29vcmRpbmF0ZXNbMF0sIGNvb3JkaW5hdGVzWzBdKSk7XHJcblxyXG4gICAgICBtYXBJbnN0YW5jZS5jdXJyZW50Py5maXRCb3VuZHMoYm91bmRzLCB7XHJcbiAgICAgICAgcGFkZGluZzogNTBcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyByb3V0ZTonLCBlcnJvcik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gSGFuZGxlIGxvY2F0aW9uIHNlbGVjdGlvbiBmcm9tIHNlYXJjaFxyXG4gIGNvbnN0IGhhbmRsZUxvY2F0aW9uU2VsZWN0ID0gKGNvb3JkaW5hdGVzOiBbbnVtYmVyLCBudW1iZXJdKSA9PiB7XHJcbiAgICBpZiAoIXVzZXJMb2NhdGlvbikgcmV0dXJuO1xyXG4gICAgY3JlYXRlUm91dGUodXNlckxvY2F0aW9uLCBjb29yZGluYXRlcyk7XHJcbiAgICBzZXRTaG93U2VhcmNoKGZhbHNlKTtcclxuICB9O1xyXG5cclxuICAvLyBBZGQgUE9JIG1hcmtlcnMgdG8gbWFwXHJcbiAgY29uc3QgYWRkUE9Jc1RvTWFwID0gKHBvaXM6IGFueVtdKSA9PiB7XHJcbiAgICAvLyBHcm91cCBQT0lzIGJ5IHByb3hpbWl0eVxyXG4gICAgY29uc3QgZ3JvdXBlZFBvaXMgPSBncm91cE5lYXJieVBvaXMocG9pcyk7XHJcbiAgICBcclxuICAgIGdyb3VwZWRQb2lzLmZvckVhY2goKGdyb3VwLCBncm91cEluZGV4KSA9PiB7XHJcbiAgICAgIGdyb3VwLmZvckVhY2goKHBvaSwgcG9pSW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGBwb2ktbWFya2VyIHBvaS0ke3BvaS50eXBlfWA7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQWRkIGRhdGEgYXR0cmlidXRlcyBmb3IgZ3JvdXBpbmdcclxuICAgICAgICBlbC5kYXRhc2V0Lmdyb3VwSWQgPSBncm91cEluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZWwuZGF0YXNldC5wb2lJbmRleCA9IHBvaUluZGV4LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoe1xyXG4gICAgICAgICAgb2Zmc2V0OiAyNSxcclxuICAgICAgICAgIGNsb3NlQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgY2xvc2VPbkNsaWNrOiBmYWxzZSxcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zZXRIVE1MKGBcclxuICAgICAgICAgIDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOiAjMWMxOTE3OyBjb2xvcjogI2ZmZmZmZjsgcGFkZGluZzogMTJweDtcIj5cclxuICAgICAgICAgICAgPGgzIHN0eWxlPVwiY29sb3I6ICMxMGI5ODE7IG1hcmdpbjogMCAwIDRweCAwOyBmb250LXNpemU6IDE0cHg7XCI+JHtwb2kubmFtZX08L2gzPlxyXG4gICAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiAjYThhMjllOyBtYXJnaW46IDA7IGZvbnQtc2l6ZTogMTJweDtcIj4ke3BvaS5kZXNjcmlwdGlvbiB8fCAnJ308L3A+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWFya2VyID0gbmV3IG1hcGJveGdsLk1hcmtlcih7XHJcbiAgICAgICAgICBlbGVtZW50OiBlbCxcclxuICAgICAgICAgIGFuY2hvcjogJ2JvdHRvbScsXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgIC5zZXRMbmdMYXQocG9pLmNvb3JkaW5hdGVzKVxyXG4gICAgICAgICAgLnNldFBvcHVwKHBvcHVwKVxyXG4gICAgICAgICAgLmFkZFRvKG1hcEluc3RhbmNlLmN1cnJlbnQhKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGhvdmVyIGhhbmRsZXJzXHJcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtZ3JvdXAtaWQ9XCIke2dyb3VwSW5kZXh9XCJdYCk7XHJcbiAgICAgICAgICBzcHJlYWRNYXJrZXJzKEFycmF5LmZyb20oZ3JvdXApLCBncm91cEluZGV4KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGdyb3VwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2RhdGEtZ3JvdXAtaWQ9XCIke2dyb3VwSW5kZXh9XCJdYCk7XHJcbiAgICAgICAgICByZXNldE1hcmtlcnMoQXJyYXkuZnJvbShncm91cCkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBbmltYXRlIG1hcmtlciBhcHBlYXJhbmNlXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgICAgICAgZWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoMCknO1xyXG4gICAgICAgIH0sIHBvaUluZGV4ICogMTUwKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ3JvdXAgbmVhcmJ5IFBPSXNcclxuICBjb25zdCBncm91cE5lYXJieVBvaXMgPSAocG9pczogYW55W10pID0+IHtcclxuICAgIGNvbnN0IGdyb3VwczogYW55W11bXSA9IFtdO1xyXG4gICAgY29uc3QgcHJveGltaXR5VGhyZXNob2xkID0gMC4wMDA1OyAvLyBBZGp1c3QgdGhpcyB2YWx1ZSBiYXNlZCBvbiB5b3VyIG5lZWRzXHJcblxyXG4gICAgcG9pcy5mb3JFYWNoKHBvaSA9PiB7XHJcbiAgICAgIGxldCBmb3VuZEdyb3VwID0gZmFsc2U7XHJcbiAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgZ3JvdXBzKSB7XHJcbiAgICAgICAgaWYgKGdyb3VwLnNvbWUoZXhpc3RpbmdQb2kgPT4gXHJcbiAgICAgICAgICBNYXRoLmFicyhleGlzdGluZ1BvaS5jb29yZGluYXRlc1swXSAtIHBvaS5jb29yZGluYXRlc1swXSkgPCBwcm94aW1pdHlUaHJlc2hvbGQgJiZcclxuICAgICAgICAgIE1hdGguYWJzKGV4aXN0aW5nUG9pLmNvb3JkaW5hdGVzWzFdIC0gcG9pLmNvb3JkaW5hdGVzWzFdKSA8IHByb3hpbWl0eVRocmVzaG9sZFxyXG4gICAgICAgICkpIHtcclxuICAgICAgICAgIGdyb3VwLnB1c2gocG9pKTtcclxuICAgICAgICAgIGZvdW5kR3JvdXAgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghZm91bmRHcm91cCkge1xyXG4gICAgICAgIGdyb3Vwcy5wdXNoKFtwb2ldKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZ3JvdXBzO1xyXG4gIH07XHJcblxyXG4gIC8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hcmtlciBzcHJlYWRpbmdcclxuICBjb25zdCBzcHJlYWRNYXJrZXJzID0gKG1hcmtlcnM6IEhUTUxFbGVtZW50W10sIGdyb3VwSW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgY29uc3QgcmFkaXVzID0gMzA7IC8vIFNwcmVhZCByYWRpdXMgaW4gcGl4ZWxzXHJcbiAgICBtYXJrZXJzLmZvckVhY2goKG1hcmtlciwgaW5kZXgpID0+IHtcclxuICAgICAgY29uc3QgYW5nbGUgPSAoaW5kZXggKiAoMzYwIC8gbWFya2Vycy5sZW5ndGgpKSAqIChNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgY29uc3QgeCA9IE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cztcclxuICAgICAgY29uc3QgeSA9IE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cztcclxuICAgICAgbWFya2VyLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHt4fXB4LCAke3l9cHgpYDtcclxuICAgICAgbWFya2VyLnN0eWxlLnpJbmRleCA9ICcxMDAwJztcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJlc2V0TWFya2VycyA9IChtYXJrZXJzOiBIVE1MRWxlbWVudFtdKSA9PiB7XHJcbiAgICBtYXJrZXJzLmZvckVhY2gobWFya2VyID0+IHtcclxuICAgICAgbWFya2VyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoMCwgMCknO1xyXG4gICAgICBtYXJrZXIuc3R5bGUuekluZGV4ID0gJ2F1dG8nO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHJldmVhbCBQT0kgY2x1c3RlclxyXG4gIGNvbnN0IHJldmVhbFBPSUNsdXN0ZXIgPSAoY2x1c3RlclBvaXM6IGFueVtdLCBjZW50ZXJQb2ludDogW251bWJlciwgbnVtYmVyXSkgPT4ge1xyXG4gICAgY2x1c3RlclBvaXMuZm9yRWFjaCgocG9pLCBpbmRleCkgPT4ge1xyXG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICBlbC5jbGFzc05hbWUgPSBgcG9pLW1hcmtlciBwb2ktJHtwb2kudHlwZX1gO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgbWFya2VyID0gbmV3IG1hcGJveGdsLk1hcmtlcih7XHJcbiAgICAgICAgZWxlbWVudDogZWwsXHJcbiAgICAgICAgYW5jaG9yOiAnY2VudGVyJyxcclxuICAgICAgfSlcclxuICAgICAgICAuc2V0TG5nTGF0KGNlbnRlclBvaW50KSAvLyBTdGFydCBhdCBjbHVzdGVyIGNlbnRlclxyXG4gICAgICAgIC5hZGRUbyhtYXBJbnN0YW5jZS5jdXJyZW50ISk7XHJcblxyXG4gICAgICAvLyBBbmltYXRlIG1hcmtlciBhcHBlYXJhbmNlIGFuZCBzcHJlYWRcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9ICcxJztcclxuICAgICAgICBjb25zdCBhbmdsZSA9IChpbmRleCAqICgzNjAgLyBjbHVzdGVyUG9pcy5sZW5ndGgpKSAqIChNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IDAuMDAwNTsgLy8gQWRqdXN0IHNwcmVhZCBkaXN0YW5jZVxyXG4gICAgICAgIGNvbnN0IG5ld0xuZyA9IGNlbnRlclBvaW50WzBdICsgTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2U7XHJcbiAgICAgICAgY29uc3QgbmV3TGF0ID0gY2VudGVyUG9pbnRbMV0gKyBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZTtcclxuICAgICAgICBcclxuICAgICAgICBtYXJrZXIuc2V0TG5nTGF0KFtuZXdMbmcsIG5ld0xhdF0pO1xyXG4gICAgICB9LCBpbmRleCAqIDEwMCk7XHJcblxyXG4gICAgICAvLyBBZGQgcG9wdXAgYmVoYXZpb3JcclxuICAgICAgY29uc3QgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoe1xyXG4gICAgICAgIGNsb3NlQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgIGNsb3NlT25DbGljazogdHJ1ZSxcclxuICAgICAgICBtYXhXaWR0aDogJzMwMHB4JyxcclxuICAgICAgICBjbGFzc05hbWU6ICdjdXN0b20tcG9wdXAnLFxyXG4gICAgICAgIGFuY2hvcjogJ2JvdHRvbSdcclxuICAgICAgfSlcclxuICAgICAgLnNldEhUTUwoYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwb3B1cC1jb250ZW50XCI+XHJcbiAgICAgICAgICA8aDM+JHtwb2kubmFtZX08L2gzPlxyXG4gICAgICAgICAgPHA+JHtwb2kuZGVzY3JpcHRpb24gfHwgJyd9PC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICBgKTtcclxuXHJcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgIC8vIENsb3NlIGFsbCBvdGhlciBwb3B1cHNcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWFwYm94Z2wtcG9wdXAnKS5mb3JFYWNoKHAgPT4gcC5yZW1vdmUoKSk7XHJcbiAgICAgICAgbWFya2VyLnNldFBvcHVwKHBvcHVwKS50b2dnbGVQb3B1cCgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHNcclxuICBjb25zdCBjYWxjdWxhdGVEaXN0YW5jZSA9IChwb2ludDE6IG51bWJlcltdLCBwb2ludDI6IG51bWJlcltdKSA9PiB7XHJcbiAgICBjb25zdCBkeCA9IHBvaW50MlswXSAtIHBvaW50MVswXTtcclxuICAgIGNvbnN0IGR5ID0gcG9pbnQyWzFdIC0gcG9pbnQxWzFdO1xyXG4gICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgfTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghbWFwQ29udGFpbmVyLmN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICAvLyBJbml0aWFsaXplIG1hcFxyXG4gICAgbWFwSW5zdGFuY2UuY3VycmVudCA9IG5ldyBtYXBib3hnbC5NYXAoe1xyXG4gICAgICBjb250YWluZXI6IG1hcENvbnRhaW5lci5jdXJyZW50LFxyXG4gICAgICBzdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvZGFyay12MTEnLFxyXG4gICAgICBjZW50ZXI6IFstMTA1LjI3MDUsIDQwLjAxNTBdLFxyXG4gICAgICB6b29tOiAxNFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gR2V0IHVzZXIgbG9jYXRpb25cclxuICAgIGlmIChcImdlb2xvY2F0aW9uXCIgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oXHJcbiAgICAgICAgKHBvc2l0aW9uKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbjogW251bWJlciwgbnVtYmVyXSA9IFtcclxuICAgICAgICAgICAgcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSxcclxuICAgICAgICAgICAgcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICBzZXRVc2VyTG9jYXRpb24obG9jYXRpb24pO1xyXG5cclxuICAgICAgICAgIC8vIENyZWF0ZSBjdXN0b20gSFRNTCBlbGVtZW50IGZvciBtYXJrZXJcclxuICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICBlbC5jbGFzc05hbWUgPSAnY3VzdG9tLW1hcmtlcic7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGNvbnN0IGRvdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgZG90LmNsYXNzTmFtZSA9ICdtYXJrZXItZG90JztcclxuICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRvdCk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcHVsc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgIHB1bHNlLmNsYXNzTmFtZSA9ICdtYXJrZXItcHVsc2UnO1xyXG4gICAgICAgICAgZWwuYXBwZW5kQ2hpbGQocHVsc2UpO1xyXG5cclxuICAgICAgICAgIC8vIENyZWF0ZSBuZXcgbWFya2VyIHdpdGggY3VzdG9tIGVsZW1lbnRcclxuICAgICAgICAgIGxvY2F0aW9uTWFya2VyLmN1cnJlbnQgPSBuZXcgbWFwYm94Z2wuTWFya2VyKHtcclxuICAgICAgICAgICAgZWxlbWVudDogZWwsXHJcbiAgICAgICAgICAgIGFuY2hvcjogJ2NlbnRlcidcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5zZXRMbmdMYXQobG9jYXRpb24pXHJcbiAgICAgICAgICAgIC5hZGRUbyhtYXBJbnN0YW5jZS5jdXJyZW50ISk7XHJcblxyXG4gICAgICAgICAgLy8gQ2VudGVyIG1hcCBvbiBsb2NhdGlvblxyXG4gICAgICAgICAgbWFwSW5zdGFuY2UuY3VycmVudD8uZmx5VG8oe1xyXG4gICAgICAgICAgICBjZW50ZXI6IGxvY2F0aW9uLFxyXG4gICAgICAgICAgICB6b29tOiAxNSxcclxuICAgICAgICAgICAgZXNzZW50aWFsOiB0cnVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChlcnJvcikgPT4gY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBsb2NhdGlvbjonLCBlcnJvciksXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlLFxyXG4gICAgICAgICAgdGltZW91dDogNTAwMCxcclxuICAgICAgICAgIG1heGltdW1BZ2U6IDBcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgaWYgKGxvY2F0aW9uTWFya2VyLmN1cnJlbnQpIHtcclxuICAgICAgICBsb2NhdGlvbk1hcmtlci5jdXJyZW50LnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChtYXBJbnN0YW5jZS5jdXJyZW50KSB7XHJcbiAgICAgICAgbWFwSW5zdGFuY2UuY3VycmVudC5yZW1vdmUoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9LCBbXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInJlbGF0aXZlIHctZnVsbCBoLWZ1bGxcIj5cclxuICAgICAgPGRpdiByZWY9e21hcENvbnRhaW5lcn0gY2xhc3NOYW1lPVwiYWJzb2x1dGUgaW5zZXQtMFwiIC8+XHJcbiAgICAgIFxyXG4gICAgICB7LyogU2VhcmNoIEJ1dHRvbiAqL31cclxuICAgICAgPGJ1dHRvblxyXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldFNob3dTZWFyY2godHJ1ZSl9XHJcbiAgICAgICAgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTQgbGVmdC00IHB4LTQgcHktMiBiZy1zdG9uZS04MDAgaG92ZXI6Ymctc3RvbmUtNzAwIHRleHQtd2hpdGUgcm91bmRlZC1tZCBzaGFkb3ctbGdcIlxyXG4gICAgICA+XHJcbiAgICAgICAgU2V0IERlc3RpbmF0aW9uXHJcbiAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgey8qIFNlYXJjaCBQYW5lbCAqL31cclxuICAgICAge3Nob3dTZWFyY2ggJiYgKFxyXG4gICAgICAgIDxTZWFyY2hQYW5lbFxyXG4gICAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0U2hvd1NlYXJjaChmYWxzZSl9XHJcbiAgICAgICAgICBvbkxvY2F0aW9uU2VsZWN0PXtoYW5kbGVMb2NhdGlvblNlbGVjdH1cclxuICAgICAgICAvPlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJtYXBib3hnbCIsIlNlYXJjaFBhbmVsIiwiZmluZFBPSXNBbG9uZ1JvdXRlIiwiYWNjZXNzVG9rZW4iLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfTUFQQk9YX1RPS0VOIiwiTWFwIiwibWFwQ29udGFpbmVyIiwibWFwSW5zdGFuY2UiLCJsb2NhdGlvbk1hcmtlciIsInJvdXRlU291cmNlIiwic2hvd1NlYXJjaCIsInNldFNob3dTZWFyY2giLCJ1c2VyTG9jYXRpb24iLCJzZXRVc2VyTG9jYXRpb24iLCJjcmVhdGVSb3V0ZSIsInN0YXJ0IiwiZW5kIiwicXVlcnkiLCJmZXRjaCIsImpzb24iLCJkYXRhIiwicm91dGVzIiwicm91dGUiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiY3VycmVudCIsImdldFNvdXJjZSIsImFkZFNvdXJjZSIsInR5cGUiLCJwcm9wZXJ0aWVzIiwiYWRkTGF5ZXIiLCJpZCIsInNvdXJjZSIsImxheW91dCIsInBhaW50IiwicG9pcyIsInBvaUNsdXN0ZXJzIiwiZ3JvdXBOZWFyYnlQb2lzIiwiY2x1c3RlclBvaW50cyIsIm1hcCIsImNsdXN0ZXIiLCJjZW50ZXIiLCJwb2ludCIsImR1cmF0aW9uIiwiZGVsYXkiLCJjdXJyZW50Q2x1c3RlckluZGV4Iiwic2V0VGltZW91dCIsImFuaW1hdGUiLCJ0aW1lc3RhbXAiLCJwcm9ncmVzcyIsImN1cnJlbnRSb3V0ZUxlbmd0aCIsIk1hdGgiLCJtYXgiLCJmbG9vciIsImxlbmd0aCIsImN1cnJlbnRQb2ludCIsImN1cnJlbnRSb3V0ZSIsInNsaWNlIiwic2V0RGF0YSIsImRpc3RhbmNlVG9DbHVzdGVyIiwiY2FsY3VsYXRlRGlzdGFuY2UiLCJyZXZlYWxQT0lDbHVzdGVyIiwiZWFzZVRvIiwiem9vbSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImFkZFBPSXNUb01hcCIsImJvdW5kcyIsInJlZHVjZSIsImNvb3JkIiwiZXh0ZW5kIiwiTG5nTGF0Qm91bmRzIiwiZml0Qm91bmRzIiwicGFkZGluZyIsImVycm9yIiwiY29uc29sZSIsImhhbmRsZUxvY2F0aW9uU2VsZWN0IiwiZ3JvdXBlZFBvaXMiLCJmb3JFYWNoIiwiZ3JvdXAiLCJncm91cEluZGV4IiwicG9pIiwicG9pSW5kZXgiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImRhdGFzZXQiLCJncm91cElkIiwidG9TdHJpbmciLCJwb3B1cCIsIlBvcHVwIiwib2Zmc2V0IiwiY2xvc2VCdXR0b24iLCJjbG9zZU9uQ2xpY2siLCJzZXRIVE1MIiwibmFtZSIsImRlc2NyaXB0aW9uIiwibWFya2VyIiwiTWFya2VyIiwiZWxlbWVudCIsImFuY2hvciIsInNldExuZ0xhdCIsInNldFBvcHVwIiwiYWRkVG8iLCJhZGRFdmVudExpc3RlbmVyIiwicXVlcnlTZWxlY3RvckFsbCIsInNwcmVhZE1hcmtlcnMiLCJBcnJheSIsImZyb20iLCJyZXNldE1hcmtlcnMiLCJzdHlsZSIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJncm91cHMiLCJwcm94aW1pdHlUaHJlc2hvbGQiLCJmb3VuZEdyb3VwIiwic29tZSIsImV4aXN0aW5nUG9pIiwiYWJzIiwicHVzaCIsIm1hcmtlcnMiLCJyYWRpdXMiLCJpbmRleCIsImFuZ2xlIiwiUEkiLCJ4IiwiY29zIiwieSIsInNpbiIsInpJbmRleCIsImNsdXN0ZXJQb2lzIiwiY2VudGVyUG9pbnQiLCJkaXN0YW5jZSIsIm5ld0xuZyIsIm5ld0xhdCIsIm1heFdpZHRoIiwicCIsInJlbW92ZSIsInRvZ2dsZVBvcHVwIiwicG9pbnQxIiwicG9pbnQyIiwiZHgiLCJkeSIsInNxcnQiLCJjb250YWluZXIiLCJuYXZpZ2F0b3IiLCJnZW9sb2NhdGlvbiIsImdldEN1cnJlbnRQb3NpdGlvbiIsInBvc2l0aW9uIiwibG9jYXRpb24iLCJjb29yZHMiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsImRvdCIsImFwcGVuZENoaWxkIiwicHVsc2UiLCJmbHlUbyIsImVzc2VudGlhbCIsImVuYWJsZUhpZ2hBY2N1cmFjeSIsInRpbWVvdXQiLCJtYXhpbXVtQWdlIiwiZGl2IiwicmVmIiwiYnV0dG9uIiwib25DbGljayIsIm9uQ2xvc2UiLCJvbkxvY2F0aW9uU2VsZWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/Map.tsx\n"));

/***/ })

});